Step 1: Set Up the Development Environment
Install Node.js and npm:

bash

sudo apt update
sudo apt install nodejs npm
Install MongoDB: (assuming MongoDB as the database)

bash

sudo apt install mongodb
Set Up a React Project:

bash

npx create-react-app budget-buddy
cd budget-buddy
Step 2: Design the Database Schema
Let's use MongoDB for the database. Below is a sample schema for users and transactions.

User Schema (user.js):

javascript

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('User', userSchema);
Transaction Schema (transaction.js):

javascript

const mongoose = require('mongoose');

const transactionSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  type: { type: String, enum: ['income', 'expense'], required: true },
  category: { type: String, required: true },
  date: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Transaction', transactionSchema);
Step 3: Develop the Backend Services
Set Up Express.js:

bash

npm install express mongoose bcryptjs jsonwebtoken
Create an Express App (server.js):

javascript

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const User = require('./models/user');
const Transaction = require('./models/transaction');

const app = express();

app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/budget-buddy', { useNewUrlParser: true, useUnifiedTopology: true });

// User registration
app.post('/register', async (req, res) => {
  const { username, password, email } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ username, password: hashedPassword, email });
  await user.save();
  res.status(201).send({ message: 'User created' });
});

// User login
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (user && bcrypt.compareSync(password, user.password)) {
    const token = jwt.sign({ userId: user._id }, 'secretkey');
    res.send({ token });
  } else {
    res.status(401).send({ message: 'Invalid credentials' });
  }
});

// Add transaction
app.post('/transaction', async (req, res) => {
  const { userId, amount, type, category } = req.body;
  const transaction = new Transaction({ userId, amount, type, category });
  await transaction.save();
  res.status(201).send({ message: 'Transaction added' });
});

// Get transactions
app.get('/transactions/:userId', async (req, res) => {
  const { userId } = req.params;
  const transactions = await Transaction.find({ userId });
  res.send(transactions);
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
Step 4: Build the Frontend Interface
Set Up React Components:
App Component (App.js):

javascript

import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import Register from './components/Register';
import Login from './components/Login';
import Dashboard from './components/Dashboard';

function App() {
  return (
    <Router>
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/register" component={Register} />
        <Route path="/login" component={Login} />
        <Route path="/dashboard" component={Dashboard} />
      </Switch>
    </Router>
  );
}

export default App;
Register Component (Register.js):

javascript

import React, { useState } from 'react';
import axios from 'axios';

function Register() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [email, setEmail] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('/register', { username, password, email });
      alert('User registered successfully');
    } catch (error) {
      alert('Error registering user');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Register</h2>
      <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} required />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
      <input type="email" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} required />
      <button type="submit">Register</button>
    </form>
  );
}

export default Register;
Login Component (Login.js):

javascript

import React, { useState } from 'react';
import axios from 'axios';

function Login() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/login', { username, password });
      localStorage.setItem('token', response.data.token);
      alert('User logged in successfully');
    } catch (error) {
      alert('Invalid credentials');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Login</h2>
      <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} required />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} required />
      <button type="submit">Login</button>
    </form>
  );
}

export default Login;
Dashboard Component (Dashboard.js):

javascript

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function Dashboard() {
  const [transactions, setTransactions] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const userId = "YOUR_USER_ID"; // Replace with actual user ID
      const response = await axios.get(`/transactions/${userId}`);
      setTransactions(response.data);
    };

    fetchData();
  }, []);

  return (
    <div>
      <h2>Dashboard</h2>
      <ul>
        {transactions.map(transaction => (
          <li key={transaction._id}>{transaction.category}: {transaction.amount}</li>
        ))}
      </ul>
    </div>
  );
}

export default Dashboard;
Step 5: Run the Application
Start the Backend Server:

bash

node server.js
Start the Frontend:

bash

npm start
This basic setup gives you a starting point to develop the "Budget Buddy" web application. You can expand upon this foundation by adding more features, improving the UI/UX, and enhancing security and performance.
